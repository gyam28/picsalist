{"version":3,"sources":["components/card/cardComponent.jsx","components/card-list/cardListComponent.jsx","components/search-box/searchBoxComponent.jsx","components/notfound.jsx","components/footer/footer.jsx","components/main.jsx","components/nav/navComponent.jsx","components/about/aboutForm.jsx","components/contact/contactForm.jsx","components/message/messageform.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","picture","id","author","CardList","pictures","map","pic","key","SearchBox","type","placeholder","onChange","onSearchChange","NotFound","Footer","Main","state","searchField","e","setState","target","value","fetch","then","response","json","this","filteredPictures","filter","toLowerCase","includes","aria-hidden","Component","Iconbar","href","About","Contact","Messaging","App","path","process","component","exact","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sZAIaA,G,MAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBAEb,yBACEA,UAAU,SACVC,IAAI,WACJC,IAAG,mCAA8BH,EAAMI,QAAQC,GAA5C,cAEL,gCAAML,EAAMI,QAAQC,GAApB,KACA,+BAAKL,EAAMI,QAAQE,OAAnB,QCTSC,G,MAAW,SAAAP,GAAK,OAC3B,yBAAKC,UAAU,UACb,yBAAKA,UAAU,OACZD,EAAMQ,SAASC,KAAI,SAAAC,GAAG,OACrB,kBAAC,EAAD,CAAMC,IAAKD,EAAIL,GAAID,QAASM,WCLvBE,G,MAAY,SAAAZ,GAAK,OAC5B,2BACEC,UAAU,aACVY,KAAK,SACLC,YAAY,mBACZC,SAAUf,EAAMgB,mBCFLC,EAJE,WACf,OAAO,+CCYMC,G,MAZA,WACb,OACE,yBAAKjB,UAAU,oBACb,mEACsC,uBAAGA,UAAU,iBADnD,OAEE,uBAAGA,UAAU,gBAFf,IAEkC,6BAFlC,iCCuCSkB,G,iNArCbC,MAAQ,CAAEZ,SAAU,GAAIa,YAAa,I,EAQrCL,eAAiB,SAAAM,GACf,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,mFAPnB,IAAD,OAClBC,MAAM,iCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAjB,GAAG,OAAI,EAAKa,SAAS,CAAEf,SAAUE,S,+BAOjC,IAAD,EAC2BoB,KAAKV,MAA/BZ,EADD,EACCA,SAAUa,EADX,EACWA,YAEZU,EAAmBvB,EAASwB,QAAO,SAAAtB,GAAG,OAC1CA,EAAIJ,OAAO2B,cAAcC,SAASb,EAAYY,kBAEhD,OACE,yBAAKhC,UAAU,QACb,mCAEE,uBACEA,UAAU,qBACVI,GAAG,SACH8B,cAAY,SACR,IANR,WASA,kBAAC,EAAD,CAAWnB,eAAgBc,KAAKd,iBAChC,kBAAC,EAAD,CAAUR,SAAUuB,IACpB,kBAAC,EAAD,W,GAhCWK,cCeJC,G,MAnBC,WACd,OACE,yBAAKpC,UAAU,YACb,uBAAGA,UAAU,SAASqC,KAAK,KACzB,uBAAGrC,UAAU,gBAEf,uBAAGqC,KAAK,UACN,uBAAGrC,UAAU,gBAEf,uBAAGqC,KAAK,YACN,uBAAGrC,UAAU,iBAEf,uBAAGqC,KAAK,YACN,uBAAGrC,UAAU,uBCPNsC,E,2MANbnB,MAAQ,G,wEAEN,OAAO,+D,GAHSgB,aCOLI,E,2MANbpB,MAAQ,G,wEAEN,OAAO,yE,GAHWgB,aCOPK,E,2MANbrB,MAAQ,G,wEAEN,OAAO,qE,GAHagB,a,MCoCTM,MA5Bf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAM0C,KAAMC,kBAAkCC,UAAW1B,IACzD,kBAAC,IAAD,CAAOwB,KAAMC,mBAAmCC,UAAWN,IAC3D,kBAAC,IAAD,CACEI,KAAMC,qBACNC,UAAWL,IAEb,kBAAC,IAAD,CACEG,KAAMC,qBACNC,UAAWJ,IAEb,kBAAC,IAAD,CACEE,KAAMC,uBACNC,UAAW5B,IAEb,kBAAC,IAAD,CAAU6B,OAAK,EAACC,KAAK,IAAIC,GAAG,UAC5B,kBAAC,IAAD,CAAUA,GAAG,mBCnBHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRNC,IAASC,OAEP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.341b19fe.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./cardStyles.css\";\n\nexport const Card = props => (\n  <div className=\"card-container\">\n    {/* <img className=\"sizing\" alt=\"pictures\" src={props.picture.download_url} /> */}\n    <img\n      className=\"sizing\"\n      alt=\"pictures\"\n      src={`https://picsum.photos/id/${props.picture.id}/450/300`}\n    />\n    <h2> {props.picture.id} </h2>\n    <p> {props.picture.author} </p>\n  </div>\n);\n","import React from \"react\";\nimport { Card } from \"../card/cardComponent\";\nimport \"./cardListStyle.css\";\n\nexport const CardList = props => (\n  <div className=\"column\">\n    <div className=\"row\">\n      {props.pictures.map(pic => (\n        <Card key={pic.id} picture={pic} />\n      ))}\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport \"./searchBoxStyles.css\";\n\nexport const SearchBox = props => (\n  <input\n    className=\"search-box\"\n    type=\"search\"\n    placeholder=\"search by author\"\n    onChange={props.onSearchChange}\n  />\n);\n","import React from \"react\";\n\nconst NotFound = () => {\n  return <h1>Page not found</h1>;\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport \"./footer.css\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer-container\">\n      <h3>\n        Many thanks 4 their contribution to <i className=\"fa fa-coffee\"></i> and\n        <i className=\"fa fa-music\"></i> <br />\n        ©️ by GyaM28 (^-^)\n      </h3>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { CardList } from \"./card-list/cardListComponent\";\nimport { SearchBox } from \"./search-box/searchBoxComponent\";\nimport NotFound from \"./notfound\";\nimport Footer from \"./footer/footer\";\nimport \"./main.css\";\n\nclass Main extends Component {\n  state = { pictures: [], searchField: \"\" };\n\n  componentDidMount() {\n    fetch(\"https://picsum.photos/v2/list\")\n      .then(response => response.json())\n      .then(pic => this.setState({ pictures: pic }));\n  }\n\n  onSearchChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { pictures, searchField } = this.state;\n\n    const filteredPictures = pictures.filter(pic =>\n      pic.author.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"main\">\n        <h1>\n          PHOT\n          <i\n            className=\"fa fa-camera-retro\"\n            id=\"camera\"\n            aria-hidden=\"true\"\n          ></i>{\" \"}\n          GALLERY\n        </h1>\n        <SearchBox onSearchChange={this.onSearchChange} />\n        <CardList pictures={filteredPictures} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./navStyle.css\";\n\nconst Iconbar = () => {\n  return (\n    <div className=\"icon-bar\">\n      <a className=\"active\" href=\"/\">\n        <i className=\"fa fa-home\"></i>\n      </a>\n      <a href=\"/about\">\n        <i className=\"fa fa-user\"></i>\n      </a>\n      <a href=\"/contact\">\n        <i className=\"fa fa-phone\"></i>\n      </a>\n      <a href=\"/message\">\n        <i className=\"fa fa-envelope\"></i>\n      </a>\n    </div>\n  );\n};\n\nexport default Iconbar;\n","import React, { Component } from \"react\";\n\nclass About extends Component {\n  state = {};\n  render() {\n    return <h1>This is an About me section</h1>;\n  }\n}\n\nexport default About;\n","import React, { Component } from \"react\";\n\nclass Contact extends Component {\n  state = {};\n  render() {\n    return <h1>These are external contacting methods</h1>;\n  }\n}\n\nexport default Contact;\n","import React, { Component } from \"react\";\n\nclass Messaging extends Component {\n  state = {};\n  render() {\n    return <h1>This is a direct messaging method</h1>;\n  }\n}\n\nexport default Messaging;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Main from \"./components/main\";\nimport Iconbar from \"./components/nav/navComponent\";\nimport NotFound from \"./components/notfound\";\nimport About from \"./components/about/aboutForm\";\nimport Contact from \"./components/contact/contactForm\";\nimport Messaging from \"./components/message/messageform\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Iconbar />\n      <div className=\"content\">\n        <Switch>\n          <Main path={process.env.PUBLIC_URL + \"/main\"} component={Main} />\n          <Route path={process.env.PUBLIC_URL + \"/about\"} component={About} />\n          <Route\n            path={process.env.PUBLIC_URL + \"/contact\"}\n            component={Contact}\n          />\n          <Route\n            path={process.env.PUBLIC_URL + \"/message\"}\n            component={Messaging}\n          />\n          <Route\n            path={process.env.PUBLIC_URL + \"/not-found\"}\n            component={NotFound}\n          />\n          <Redirect exact from=\"/\" to=\"/main\" />\n          <Redirect to=\"/not-found\" />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n// import createHistory from \"history/createBrowserHistory\";\n\n// const store = configureStore({ history });\n\nReactDOM.render(\n  // <Provider store={store}>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  // </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}